syntax = "proto3";

package FastRail;
option csharp_namespace = "FastRail.Protos";

message Transaction {
  int64 zxid = 1;

  oneof Txn {
    CreateNodeTransaction CreateNode = 10;
    DeleteNodeTransaction DeleteNode = 11;
    UpdateNodeTransaction UpdateNode = 12;
    SyncTransaction Sync = 13;
    CreateSessionTransaction CreateSession = 14;
    RemoveSessionTransaction RemoveSession = 15;
  }
}

enum CreateMode {
  PERSISTENT = 0;
  EPHEMERAL = 1;
  SEQUENCE = 2;
  EPHEMERAL_SEQUENTIAL = 3;
  CONTAINER = 4;
  TTL = 5;
  PERSISTENT_SEQUENTIAL_WITH_TTL = 6;
}

enum WatcherEventType {
  EMPTY = 0; // protobuf enum must starts with 0
  NONE = -1;
  NODE_CREATED = 1;
  NODE_DELETED = 2;
  NODE_DATA_CHANGED = 3;
  NODE_CHILDREN_CHANGED = 4;
  DATA_WATCHER_MOVED = 5;
  CHILD_WATCHER_MOVED = 6;
  PERSISTENT_WATCHER_MOVED = 7;
}

enum KeeperState {
  DISCONNECTED = 0;
  SYNC_CONNECTED = 3;
  AUTH_FAILED = 4;
  CONNECTED_READONLY = 5;
  SASL_AUTHENTICATED = 6;
  EXPIRED = -112;
  CLOSED = 7;
}

message CreateSessionTransaction {
  SessionEntry session = 1;
}

message RemoveSessionTransaction {
  int64 session_id = 1;
}

message CreateNodeTransaction {
  string path = 2;
  bytes data = 3;
  int64 ctime = 4;
  int64 ephemeral_owner = 5;
  int64 ttl = 6;
  bool is_container = 7;
  bool is_sequential = 8;
}

message DeleteNodeTransaction {
  string path = 1;
}

message UpdateNodeTransaction {
  string path = 1;
  bytes data = 2;
  int64 mtime = 3;
  int32 version = 4;
  int32 cversion = 5;
  int32 aversion = 6;
  int64 pzxid = 7;
}

message SyncTransaction {
  string path = 1;
}

message SessionEntry {
  int64 id = 1;
  int32 timeout = 2;
  int64 last_live = 3;
  bytes password = 4;
  bool read_only = 5;
}

message StatEntry {
  // created zxid
  int64 czxid = 1;
  // last modified zxid
  int64 mzxid = 2;
  // create time
  int64 ctime = 3;
  // modify time
  int64 mtime = 4;
  // node version
  int32 version = 5;
  // child version
  int32 cversion = 6;
  // ACL version
  int32 aversion = 7;
  // owner id if ephemeral, otherwise zero
  int64 ephemeral_owner = 8;
  // last modified children
  int64 pzxid = 9;
  // length of the data in the node
  int32 data_length = 10;
  // number of children of this node
  int32 num_children = 11;
  // is container node
  bool is_container = 12;
  // time to live
  int64 ttl = 13;
}
